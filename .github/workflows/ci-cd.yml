name: 🚀 ISS Crew Health Analysis - Quality & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Data Authenticity Validation
  validate-nasa-data:
    name: 🛰️ Validate NASA Data
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install pandas numpy scipy scikit-learn

      - name: ✅ Verify data authenticity
        run: |
          echo "🔍 Checking for hardcoded or fake data..."
          if grep -r "hardcoded\|fake\|simulated\|placeholder\|mock" data/ --exclude="*.md" || \
             grep -r "hardcoded\|fake\|simulated\|placeholder\|mock" web/src/ --exclude="*.test.*" --exclude="*.md"; then
            echo "❌ Error: Found potential hardcoded or fake data"
            exit 1
          fi
          echo "✅ All data appears to be authentic NASA sources"

      - name: 📊 Validate data processing pipeline
        run: |
          python -c "
          import pandas as pd
          import numpy as np
          
          # Verificar integridad de datos NASA
          try:
              # Verificar archivos de datos existen
              bone_data = pd.read_csv('data/real_bone_density_measurements.csv')
              crew_data = pd.read_csv('data/real_astronaut_profiles.csv')
              
              print(f'✅ Bone density data: {len(bone_data)} records')
              print(f'✅ Crew profile data: {len(crew_data)} records')
              
              # Verificar que no hay valores imposibles
              if bone_data['bone_density_change'].max() > 0.1:
                  raise ValueError('Unrealistic bone density values found')
              
              print('✅ Data validation passed')
          except Exception as e:
              print(f'❌ Data validation failed: {e}')
              exit(1)
          "

  # Frontend Quality Checks
  frontend-quality:
    name: 🎨 Frontend Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npx tsc --noEmit

      - name: 📝 ESLint
        run: npx eslint . --ext .ts,.tsx --format stylish

      - name: 💄 Prettier check
        run: npx prettier --check .

      - name: 🧪 Run tests
        run: npm run test -- --coverage --passWithNoTests

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./web/coverage/lcov.info
          flags: frontend
          fail_ci_if_error: false

  # Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [validate-nasa-data, frontend-quality]
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: web/.next/
          retention-days: 1

  # Performance Testing
  lighthouse:
    name: 🚨 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚨 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './web/lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Vercel (only on main branch)
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://iss-crew-health-analysis.vercel.app
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./web

  # Post-deployment checks
  post-deploy:
    name: 🧪 Post-Deploy Checks
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🏥 Health check
        run: |
          echo "🔍 Running health checks..."
          
          # Verificar que el sitio está online
          if curl -f -s https://iss-crew-health-analysis.vercel.app/ > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi
          
          # Verificar APIs principales
          if curl -f -s https://iss-crew-health-analysis.vercel.app/api/metrics > /dev/null; then
            echo "✅ Metrics API is working"
          else
            echo "❌ Metrics API is not working"
            exit 1
          fi

      - name: 📊 Performance check
        run: |
          echo "⚡ Checking Core Web Vitals..."
          # Aquí podrías agregar checks de Performance usando herramientas como PageSpeed Insights API

  # Notification
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [post-deploy]
    if: always()
    steps:
      - name: 📧 Notify deployment status
        if: github.ref == 'refs/heads/main'
        run: |
          if [ "${{ needs.post-deploy.result }}" == "success" ]; then
            echo "✅ ISS Crew Health Analysis deployed successfully!"
            echo "🌐 URL: https://iss-crew-health-analysis.vercel.app"
            echo "📊 All NASA data authenticity checks passed"
          else
            echo "❌ Deployment failed or had issues"
            echo "🔍 Check the logs for more details"
          fi
